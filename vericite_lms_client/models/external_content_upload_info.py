# coding: utf-8

"""
    VeriCiteLmsApiV1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExternalContentUploadInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_length': 'int',
        'content_type': 'str',
        'external_content_id': 'str',
        'file_path': 'str',
        'headers': 'object',
        'url_post': 'str'
    }

    attribute_map = {
        'content_length': 'contentLength',
        'content_type': 'contentType',
        'external_content_id': 'externalContentID',
        'file_path': 'filePath',
        'headers': 'headers',
        'url_post': 'urlPost'
    }

    def __init__(self, content_length=None, content_type=None, external_content_id=None, file_path=None, headers=None, url_post=None):
        """
        ExternalContentUploadInfo - a model defined in Swagger
        """

        self._content_length = None
        self._content_type = None
        self._external_content_id = None
        self._file_path = None
        self._headers = None
        self._url_post = None

        if content_length is not None:
          self.content_length = content_length
        if content_type is not None:
          self.content_type = content_type
        if external_content_id is not None:
          self.external_content_id = external_content_id
        if file_path is not None:
          self.file_path = file_path
        if headers is not None:
          self.headers = headers
        if url_post is not None:
          self.url_post = url_post

    @property
    def content_length(self):
        """
        Gets the content_length of this ExternalContentUploadInfo.
        The length of the file

        :return: The content_length of this ExternalContentUploadInfo.
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """
        Sets the content_length of this ExternalContentUploadInfo.
        The length of the file

        :param content_length: The content_length of this ExternalContentUploadInfo.
        :type: int
        """

        self._content_length = content_length

    @property
    def content_type(self):
        """
        Gets the content_type of this ExternalContentUploadInfo.
        The files content type

        :return: The content_type of this ExternalContentUploadInfo.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this ExternalContentUploadInfo.
        The files content type

        :param content_type: The content_type of this ExternalContentUploadInfo.
        :type: str
        """

        self._content_type = content_type

    @property
    def external_content_id(self):
        """
        Gets the external_content_id of this ExternalContentUploadInfo.
        ID used to ID the uploaded file

        :return: The external_content_id of this ExternalContentUploadInfo.
        :rtype: str
        """
        return self._external_content_id

    @external_content_id.setter
    def external_content_id(self, external_content_id):
        """
        Sets the external_content_id of this ExternalContentUploadInfo.
        ID used to ID the uploaded file

        :param external_content_id: The external_content_id of this ExternalContentUploadInfo.
        :type: str
        """

        self._external_content_id = external_content_id

    @property
    def file_path(self):
        """
        Gets the file_path of this ExternalContentUploadInfo.
        The file path

        :return: The file_path of this ExternalContentUploadInfo.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """
        Sets the file_path of this ExternalContentUploadInfo.
        The file path

        :param file_path: The file_path of this ExternalContentUploadInfo.
        :type: str
        """

        self._file_path = file_path

    @property
    def headers(self):
        """
        Gets the headers of this ExternalContentUploadInfo.
        A map of required headers

        :return: The headers of this ExternalContentUploadInfo.
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """
        Sets the headers of this ExternalContentUploadInfo.
        A map of required headers

        :param headers: The headers of this ExternalContentUploadInfo.
        :type: object
        """

        self._headers = headers

    @property
    def url_post(self):
        """
        Gets the url_post of this ExternalContentUploadInfo.
        URL to submit the attachment to

        :return: The url_post of this ExternalContentUploadInfo.
        :rtype: str
        """
        return self._url_post

    @url_post.setter
    def url_post(self, url_post):
        """
        Sets the url_post of this ExternalContentUploadInfo.
        URL to submit the attachment to

        :param url_post: The url_post of this ExternalContentUploadInfo.
        :type: str
        """

        self._url_post = url_post

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExternalContentUploadInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
