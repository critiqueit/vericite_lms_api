# coding: utf-8

"""
    VeriCiteLmsApiV1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportURLLinkResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_id': 'str',
        'context_id': 'str',
        'external_content_id': 'str',
        'url': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'assignment_id': 'assignmentID',
        'context_id': 'contextID',
        'external_content_id': 'externalContentID',
        'url': 'url',
        'user_id': 'userID'
    }

    def __init__(self, assignment_id=None, context_id=None, external_content_id=None, url=None, user_id=None):
        """
        ReportURLLinkResponse - a model defined in Swagger
        """

        self._assignment_id = None
        self._context_id = None
        self._external_content_id = None
        self._url = None
        self._user_id = None

        if assignment_id is not None:
          self.assignment_id = assignment_id
        if context_id is not None:
          self.context_id = context_id
        if external_content_id is not None:
          self.external_content_id = external_content_id
        if url is not None:
          self.url = url
        if user_id is not None:
          self.user_id = user_id

    @property
    def assignment_id(self):
        """
        Gets the assignment_id of this ReportURLLinkResponse.
        Assignment ID.

        :return: The assignment_id of this ReportURLLinkResponse.
        :rtype: str
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """
        Sets the assignment_id of this ReportURLLinkResponse.
        Assignment ID.

        :param assignment_id: The assignment_id of this ReportURLLinkResponse.
        :type: str
        """

        self._assignment_id = assignment_id

    @property
    def context_id(self):
        """
        Gets the context_id of this ReportURLLinkResponse.
        Context ID.

        :return: The context_id of this ReportURLLinkResponse.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """
        Sets the context_id of this ReportURLLinkResponse.
        Context ID.

        :param context_id: The context_id of this ReportURLLinkResponse.
        :type: str
        """

        self._context_id = context_id

    @property
    def external_content_id(self):
        """
        Gets the external_content_id of this ReportURLLinkResponse.
        external Content ID

        :return: The external_content_id of this ReportURLLinkResponse.
        :rtype: str
        """
        return self._external_content_id

    @external_content_id.setter
    def external_content_id(self, external_content_id):
        """
        Sets the external_content_id of this ReportURLLinkResponse.
        external Content ID

        :param external_content_id: The external_content_id of this ReportURLLinkResponse.
        :type: str
        """

        self._external_content_id = external_content_id

    @property
    def url(self):
        """
        Gets the url of this ReportURLLinkResponse.
        The url to retrieve the report

        :return: The url of this ReportURLLinkResponse.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ReportURLLinkResponse.
        The url to retrieve the report

        :param url: The url of this ReportURLLinkResponse.
        :type: str
        """

        self._url = url

    @property
    def user_id(self):
        """
        Gets the user_id of this ReportURLLinkResponse.
        User ID.

        :return: The user_id of this ReportURLLinkResponse.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ReportURLLinkResponse.
        User ID.

        :param user_id: The user_id of this ReportURLLinkResponse.
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportURLLinkResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
